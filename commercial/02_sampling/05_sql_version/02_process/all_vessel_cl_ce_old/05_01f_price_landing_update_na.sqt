
-- SET2011 =2011;

-- ##################################################################
-- #
-- # delete insert best price  
-- #

delete from [commercial]_[fishery]_[final]_[osf]_[2011].best_price where land_year =2011;

insert into 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price 
select distinct 
 EUNR,
 REISENR,
 LANDNR,
 GEBIET,
 ZONE,
 RECHTECK,

 YEAR(LANDDAT) as land_year,
 QUARTER(LANDDAT) as land_quarter,
 MONTH(LANDDAT) as land_month,
 WEEK(LANDDAT) as land_week,

 LANDDAT,

 LANDORT,
 FISCHART,

 0.00 as sum_landing,
 0.00 as sum_revenue, 
 0.00 as avg_land_price, 

 0.00 as price_count,
 0.00 as avg_best_price, 
 0.00 as std_best_price,
 0.00 as cov_best_price, 
 'land_price' as price_source 
from 
 [commercial]_[fishery]_[final]_[osf]_[2011].ANLANDUNG 
where 
YEAR(LANDDAT) = @year
;

-- ##################################################################
-- #
-- # translate species code (e.g. FLX to FLE
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price bp, 
 [commercial]_[parameter].species_tran st 
set 
 bp.FISCHART = st.tran_code  
where 
 st.species_code = bp.FISCHART
;

-- ##################################################################
-- #
-- # delete insert aggregated landing price
-- #
-- # first entry for best_price is landing price (if > 0)
-- # (avg price of all products of a species of a landing)
-- #

SET2011 = [2011];

delete from [commercial]_[fishery]_[final]_[osf]_[2011].land_price where land_year =2011;

insert into 
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price
select
 EUNR,
 REISENR,
 LANDNR,
 GEBIET,
 ZONE,
 RECHTECK,

 YEAR(LANDDAT) as land_year,
 QUARTER(LANDDAT) as land_quarter,
 MONTH(LANDDAT) as land_month,
 WEEK(LANDDAT) as land_week,

 LANDDAT,

 LANDORT,
 FISCHART,

 sum(FANGKG) as sum_landing,
 sum(ERLOES) as sum_revenue, 
 count(*) as price_count, 
 sum(ERLOES)/sum(FANGKG) as avg_land_price, 
 std(ERLOES/FANGKG) as std_land_price, 
 std(ERLOES/FANGKG)/(sum(ERLOES)/sum(FANGKG)) as cov_land_price    
from 
 [commercial]_[fishery]_[final]_[osf]_[2011].ANLANDUNG
where 
 YEAR(LANDDAT) = [2011] 
and 
 ERLOES > 0
group by 
 EUNR,
 REISENR,
 LANDNR,
 GEBIET,
 ZONE,
 RECHTECK,

 YEAR(LANDDAT),
 QUARTER(LANDDAT),
 MONTH(LANDDAT),
 WEEK(LANDDAT),

 LANDDAT,

 LANDORT,
 FISCHART
;

-- ##################################################################
-- #
-- # translate species code (e.g. FLX to FLE)
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price bp, 
 commercial_parameter.species_tran st 
set 
 bp.FISCHART = st.tran_code  
where 
 st.species_code = bp.FISCHART
;


-- ############################################################
-- #
-- # drop create temporary aggregated date price 
-- #

drop table if exists [commercial]_[fishery]_[final]_[osf]_[2011].date_price;

create temporary table [commercial]_[fishery]_[final]_[osf]_[2011].date_price(
 land_year int, 

 LANDDAT varchar(20),

 LANDORT int,
 FISCHART char(3),

 sum_landing double,
 sum_revenue double, 
 price_count int, 
 avg_date_price double, 
 std_date_price double, 
 cov_date_price double,     

index( 
 land_year, 

 LANDDAT,

 LANDORT,
 FISCHART
)
)

select
 land_year,

 LANDDAT,

 LANDORT,
 FISCHART,

 sum(sum_landing) as sum_landing,
 sum(sum_revenue) as sum_revenue, 
 count(*) as price_count, 
 sum(sum_revenue)/sum(sum_landing) as avg_date_price,
 std(sum_revenue/sum_landing) as std_date_price, 
 std(sum_revenue/sum_landing)/(sum(sum_revenue)/sum(sum_landing)) as cov_date_price    
 
from 
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price
where 
 land_year = @year 
and 
 sum_revenue > 0
group by 
 land_year,

 LANDDAT, 

 LANDORT, 
 FISCHART 
;


-- ############################################################
-- #
-- # drop create temporary aggregated week price 
-- #

drop table if exists [commercial]_[fishery]_[final]_[osf]_[2011].week_price;

create temporary table [commercial]_[fishery]_[final]_[osf]_[2011].week_price(

 land_year int, 
 land_week int,

 LANDORT int,
 FISCHART char(3),

 sum_landing double,
 sum_revenue double, 
 price_count int, 
 avg_week_price double,
 std_week_price double, 
 cov_week_price double,    
 
index( 
 land_year,
 land_week,

 LANDORT,
 FISCHART
)
)

select
 land_year,
 land_week,

 LANDORT,
 FISCHART,

 sum(sum_landing) as sum_landing,
 sum(sum_revenue) as sum_revenue, 
 count(*) as price_count, 
 sum(sum_revenue)/sum(sum_landing) as avg_week_price,
 std(sum_revenue/sum_landing) as std_week_price, 
 std(sum_revenue/sum_landing)/(sum(sum_revenue)/sum(sum_landing)) as cov_week_price    

from 
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price
where 
 land_year = @year
and 
 sum_revenue > 0
group by 
 land_year,
 land_week,

 LANDORT, 
 FISCHART
;

-- ############################################################
-- #
-- # drop create temporary aggregated month price
-- #


drop table if exists [commercial]_[fishery]_[final]_[osf]_[2011].month_price;

create temporary table [commercial]_[fishery]_[final]_[osf]_[2011].month_price(

 land_year int, 
 land_month int,

 LANDORT int,
 FISCHART char(3),

 sum_landing double,
 sum_revenue double, 
 price_count int, 
 avg_month_price double, 
 std_month_price double, 
 cov_month_price double,    

index( 
 land_year,
 land_month,

 LANDORT,
 FISCHART
)
)

select
 land_year,
 land_month,

 LANDORT,
 FISCHART,

 sum(sum_landing) as sum_landing,
 sum(sum_revenue) as sum_revenue, 
 count(*) as price_count, 
 sum(sum_revenue)/sum(sum_landing) as avg_month_price,
 std(sum_revenue/sum_landing) as std_month_price, 
 std(sum_revenue/sum_landing)/(sum(sum_revenue)/sum(sum_landing)) as cov_month_price    

from 
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price
where 
 land_year = @year
and 
 sum_revenue > 0
group by 
 land_year,
 land_month,

 LANDORT, 
 FISCHART
;

-- ############################################################
-- #
-- # drop create temporary aggregated quarter price 
-- #

drop table if exists [commercial]_[fishery]_[final]_[osf]_[2011].quarter_price;

create temporary table [commercial]_[fishery]_[final]_[osf]_[2011].quarter_price(

 land_year int, 
 land_quarter int,

 LANDORT int,
 FISCHART char(3),

 sum_landing double,
 sum_revenue double, 
 price_count int, 
 avg_quarter_price double, 
 std_quarter_price double, 
 cov_quarter_price double,    

index( 
 land_year,
 land_quarter,

 LANDORT,
 FISCHART
)
)

select
 land_year,
 land_quarter,

 LANDORT,
 FISCHART,

 sum(sum_landing) as sum_landing,
 sum(sum_revenue) as sum_revenue, 
 count(*) as price_count, 
 sum(sum_revenue)/sum(sum_landing) as avg_quarter_price,
 std(sum_revenue/sum_landing) as std_quarter_price, 
 std(sum_revenue/sum_landing)/(sum(sum_revenue)/sum(sum_landing)) as cov_quarter_price    

from 
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price
where 
 land_year = @year
and 
 sum_revenue > 0
group by 
 land_year,
 land_quarter,

 LANDORT, 
 FISCHART
;


-- ############################################################
-- #
-- # drop create temporary aggregated year price
-- #

drop table if exists [commercial]_[fishery]_[final]_[osf]_[2011].year_price;

create temporary table [commercial]_[fishery]_[final]_[osf]_[2011].year_price(

 land_year int,

 LANDORT int,
 FISCHART char(3),

 sum_landing double,
 sum_revenue double, 
 price_count int, 
 avg_year_price double, 
 std_year_price double, 
 cov_year_price double,    

index( 
 land_year,

 LANDORT,
 FISCHART
)
)

select
 land_year,

 LANDORT,
 FISCHART,

 sum(sum_landing) as sum_landing,
 sum(sum_revenue) as sum_revenue, 
 count(*) as price_count, 
 sum(sum_revenue)/sum(sum_landing) as avg_year_price,
 std(sum_revenue/sum_landing) as std_year_price, 
 std(sum_revenue/sum_landing)/(sum(sum_revenue)/sum(sum_landing)) as cov_year_price    

from 
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price

where 
 land_year = @year
and 
 sum_revenue > 0
group by 
 land_year,

 LANDORT, 
 FISCHART
;

-- ############################################################
-- #
-- # drop create temporary aggregated country price 
-- #

drop table if exists [commercial]_[fishery]_[final]_[osf]_[2011].country_price;

create temporary table [commercial]_[fishery]_[final]_[osf]_[2011].country_price(

 land_year int,

 FISCHART char(3),

 sum_landing double,
 sum_revenue double, 
 price_count int, 
 avg_country_price double, 
 std_country_price double, 
 cov_country_price double,    

index( 
 land_year,

 FISCHART
)
)

select
 land_year,

 FISCHART,

 sum(sum_landing) as sum_landing,
 sum(sum_revenue) as sum_revenue, 
 count(*) as price_count, 
 sum(sum_revenue)/sum(sum_landing) as avg_country_price,
 std(sum_revenue/sum_landing) as std_country_price, 
 std(sum_revenue/sum_landing)/(sum(sum_revenue)/sum(sum_landing)) as cov_country_price    

from 
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price

where 
 land_year = @year
and 
 sum_revenue > 0
group by 
 land_year,

 FISCHART
;


-- ############################################################
-- #
-- # update best price with landing price 
-- #


update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price bp,
 [commercial]_[fishery]_[final]_[osf]_[2011].land_price dp 
set 
 bp.price_count = dp.price_count, 
 bp.avg_best_price = dp.avg_land_price, 
 bp.std_best_price = dp.std_land_price, 
 bp.cov_best_price = dp.cov_land_price, 

 bp.avg_land_price = dp.avg_land_price, 
 bp.sum_landing = dp.sum_landing, 
 bp.sum_revenue = dp.sum_revenue   
where 
 dp.land_year = @year
and 
 dp.land_year = bp.land_year 
and
 dp.EUNR = bp.EUNR 
and
 dp.REISENR = bp.REISENR 
and
 dp.LANDNR = bp.LANDNR 
and
 dp.GEBIET = bp.GEBIET 
and
 dp.ZONE = bp.ZONE 
and
 dp.RECHTECK = bp.RECHTECK 
and 
 dp.LANDDAT = bp.LANDDAT
and 
 dp.LANDORT = bp.LANDORT
and 
 dp.FISCHART = bp.FISCHART
;


-- ############################################################
-- #
-- # update best price with date price 
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price bp,
 [commercial]_[fishery]_[final]_[osf]_[2011].date_price dp 
set 
 bp.price_count = dp.price_count, 
 bp.avg_best_price = dp.avg_date_price, 
 bp.std_best_price = dp.std_date_price, 
 bp.cov_best_price = dp.cov_date_price, 

 bp.price_source = 'date_price' 
where  
 dp.land_year = @year
and 
 bp.avg_best_price = 0 
and 
 dp.land_year = bp.land_year
and 
 dp.LANDDAT = bp.LANDDAT
and 
 dp.LANDORT = bp.LANDORT
and 
 dp.FISCHART = bp.FISCHART
;

-- ############################################################
-- #
-- # update best price with week price 
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price dp, 
 [commercial]_[fishery]_[final]_[osf]_[2011].week_price wp 
set 
 dp.price_count = wp.price_count, 
 dp.avg_best_price = wp.avg_week_price, 
 dp.std_best_price = wp.std_week_price, 
 dp.cov_best_price = wp.cov_week_price, 

 dp.price_source = 'week_price' 
where  
 dp.land_year = @year
and 
 dp.avg_best_price = 0 
and 
 dp.land_year = wp.land_year
and 
 dp.land_week = wp.land_week
and 
 dp.LANDORT = wp.LANDORT
and 
 dp.FISCHART = wp.FISCHART
;

-- ############################################################
-- #
-- # update best price with month price 
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price dp, 
 [commercial]_[fishery]_[final]_[osf]_[2011].month_price mp 
set 
 dp.price_count = mp.price_count, 
 dp.avg_best_price = mp.avg_month_price, 
 dp.std_best_price = mp.std_month_price, 
 dp.cov_best_price = mp.cov_month_price, 

 dp.price_source = 'month_price' 
where  
 dp.land_year = @year
and 
 dp.avg_best_price = 0 
and 
 dp.land_year = mp.land_year
and 
 dp.land_month = mp.land_month
and 
 dp.LANDORT = mp.LANDORT
and 
 dp.FISCHART = mp.FISCHART
;

-- ############################################################
-- #
-- # update best price with quarter price 
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price dp, 
 [commercial]_[fishery]_[final]_[osf]_[2011].quarter_price qp 
set 
 dp.price_count = qp.price_count, 
 dp.avg_best_price = qp.avg_quarter_price, 
 dp.std_best_price = qp.std_quarter_price, 
 dp.cov_best_price = qp.cov_quarter_price, 

 dp.price_source = 'quarter_price' 
where  
 dp.land_year = @year
and 
 dp.avg_best_price = 0 
and 
 dp.land_year = qp.land_year
and 
 dp.land_quarter = qp.land_quarter
and 
 dp.LANDORT = qp.LANDORT
and 
 dp.FISCHART = qp.FISCHART
;

-- ############################################################
-- #
-- # update best price with year price 
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price dp, 
 [commercial]_[fishery]_[final]_[osf]_[2011].year_price yp 
set 
 dp.price_count = yp.price_count, 
 dp.avg_best_price = yp.avg_year_price, 
 dp.std_best_price = yp.std_year_price, 
 dp.cov_best_price = yp.cov_year_price, 

 dp.price_source = 'year_price' 
where  
 dp.land_year = @year
and 
 dp.avg_best_price = 0 
and 
 dp.land_year = yp.land_year
and 
 dp.LANDORT = yp.LANDORT
and 
 dp.FISCHART = yp.FISCHART
;

-- ############################################################
-- #
-- # update best price with country price 
-- #

update 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price dp, 
 [commercial]_[fishery]_[final]_[osf]_[2011].country_price cp 
set 
 dp.price_count = cp.price_count, 
 dp.avg_best_price = cp.avg_country_price, 
 dp.std_best_price = cp.std_country_price, 
 dp.cov_best_price = cp.cov_country_price, 
 dp.price_source = 'country_price' 
where  
 dp.land_year = @year
and 
 dp.avg_best_price = 0 
and 
 dp.land_year = cp.land_year
and 
 dp.FISCHART = cp.FISCHART
;


-- ############################################################
-- #
-- # delete insert aggregate best price into best_trip_price 
-- #

delete from [commercial]_[fishery]_[final]_[osf]_[2011].best_trip_price where JAHR =2011;

insert into 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_trip_price
select 
 bp.land_year as JAHR,
 bp.EUNR,
 bp.REISENR,
 bp.GEBIET,
 bp.ZONE,
 bp.RECHTECK,
 bp.FISCHART,
 bp.LANDORT,
 avg(bp.avg_best_price) as avg_trip_price
from 
 [commercial]_[fishery]_[final]_[osf]_[2011].best_price bp 
where 
 bp.land_year = @year
group by 
 bp.land_year, 
 bp.EUNR, 
 bp.REISENR, 
 bp.GEBIET, 
 bp.ZONE, 
 bp.RECHTECK, 
 bp.FISCHART, 
 bp.LANDORT
;