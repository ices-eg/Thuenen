
###################################################################################################
###################################################################################################
#
# comment char '#' always   f i r s t   char of a comment line!
#
###################################################################################################
###################################################################################################

###################################################################################################
#
# station_length_frequency_split_v1.sql
#
###################################################################################################

#############################################################################
#
# split catch length class frequency from LengFi into discard and landing
#
# calculate length class mass from product of length class frequency and 
#
#	- avg this cruise (prefix tc_, first choice)
#	- length mass relationship this cruise (prefix tc_, for gaps in avg mass)
#	- length mass relationship last year (prefix ly_, where no tc_)
#	- length mass relationship other source (prefix os_, where even no ly_)
# 
# label the calculus according to the avg mass source with
#
#	- tc_length_mass
#	- ly_length_mass
#	- os_length_mass
#
# treat 
#
# length class frequency from DLenFi and MlenFi 
# and 
# length class mass calculated from DLenFi and MLenFi and avg length class mass 
# 
# with 
#
# treat_discard_frequency = 
#
#	- add 		-> total_discard_length_frequency = split_discard_frequency + discard_length_frequency 
#				-> total_discard_class_mass = split_discard_class_mass + discard_class_mass
#
#	- replace_dlcf 	-> total_discard_length_frequency = split_discard_frequency 
#				-> total_discard_class_mass = split_discard_class_mass
#
#	- neglect_dlcf 	-> total_discard_length_frequency = discard_length_frequency
#				-> total_discard_class_mass = discard_class_mass
#
#
# treat_landing_frequency = 
#
#	- add_llcf 		-> total_landing_length_frequency = split_landing_frequency + landing_length_frequency  
#				-> total_landing_class_mass = split_landing_class_mass + landing_class_mass
#
#	- replace_llcf 	-> total_landing_length_frequency = split_landing_frequency 
#				-> total_landing_class_mass = split_landing_class_mass
#
#	- neglect_llcf 	-> total_landing_length_frequency = landing_length_frequency 
#				-> total_landing_class_mass = landing_class_mass
#
#
############################################################################## 

set @year = [this_year];

drop table if exists `[commercial]_[processing]`.station_length_frequency_split;

create table 

 `[commercial]_[processing]`.station_length_frequency_split 

select 

 sss_e.this_year, 
 sss_e.cruise, 
 sss_e.station,
 sss_e.net,
 sss_e.quarter, 
 sss_e.sub_division, 
 sss_e.species, 
 sss_e.sex, 
 sss_e.length_class, 
 sss_e.length_mass_avg, 
 sss_e.avg_class_mass_source,
 sss_e.avg_class_mass,
 
 sss_e.split_discard_class_mass, 
 sss_e.split_landing_class_mass,
 sss_e.split_discard_frequency,
 sss_e.split_landing_frequency,
 
 sss_e.catch_length_frequency,
 sss_e.landing_length_frequency,
 sss_e.discard_length_frequency,
 
 sss_e.catch_class_mass, 
 sss_e.discard_class_mass, 
 sss_e.landing_class_mass,
 sss_e.treat_discard_frequency,
 sss_e.treat_landing_frequency,
 
 if(trim(sss_e.treat_landing_frequency) <> 'add',if(trim(sss_e.treat_landing_frequency) = 'neglect', sss_e.landing_class_mass, sss_e.split_landing_class_mass),(sss_e.split_landing_class_mass + sss_e.landing_class_mass))  as total_landing_class_mass
 ,
 if(trim(sss_e.treat_discard_frequency) <> 'add',if(trim(sss_e.treat_discard_frequency) = 'neglect', sss_e.discard_class_mass, sss_e.split_discard_class_mass),(sss_e.split_discard_class_mass + sss_e.discard_class_mass))  as total_discard_class_mass
 ,
 if(trim(sss_e.treat_landing_frequency) <> 'add',if(trim(sss_e.treat_landing_frequency) = 'neglect', sss_e.landing_length_frequency, sss_e.split_landing_frequency),(sss_e.split_landing_frequency + sss_e.landing_length_frequency))  as total_landing_length_frequency
 ,
 if(trim(sss_e.treat_discard_frequency) <> 'add',if(trim(sss_e.treat_discard_frequency) = 'neglect', sss_e.discard_length_frequency, sss_e.split_discard_frequency),(sss_e.split_discard_frequency + sss_e.discard_length_frequency))  as total_discard_length_frequency

from

( 

select  

 sss.cruise, 
 sss.station, 
 sss.net,
 sss.this_year, 
 sss.quarter, 
 sss.sub_division, 
 sss.species, 
 sss.sex, 
 sss.treat_landing_frequency,
 sss.treat_discard_frequency,
 sss.length_class, 
 sss.split_discard_frequency, 
 sss.split_landing_frequency,
 
 sss.catch_length_frequency,
 sss.landing_length_frequency,
 sss.discard_length_frequency,
 
 sss.length_mass_avg, 
  
 case when sss.length_mass_avg is not null
      then 'avg_class_mass'
      when sss.length_mass_avg is null and sss.tc_length_mass is not null
      then 'tc_length_mass'
      when sss.length_mass_avg is null and sss.tc_length_mass is null and sss.ly_length_mass is not null
      then 'ly_length_mass'
      else'os_length_mass' 
 end as avg_class_mass_source,

 case when sss.length_mass_avg is not null
      then sss.length_mass_avg 
      when sss.length_mass_avg is null and sss.tc_length_mass is not null
      then sss.tc_length_mass
      when sss.length_mass_avg is null and sss.tc_length_mass is null and sss.ly_length_mass is not null
      then sss.ly_length_mass
      else sss.os_length_mass 
 end as avg_class_mass,
 
 (sss.split_discard_frequency *(if(sss.length_mass_avg is null,if(sss.tc_length_mass is null,if(sss.ly_length_mass is null, sss.os_length_mass,sss.ly_length_mass),sss.tc_length_mass),sss.length_mass_avg))) AS split_discard_class_mass
  , 
 (sss.split_landing_frequency *(if(sss.length_mass_avg is null,if(sss.tc_length_mass is null,if(sss.ly_length_mass is null, sss.os_length_mass,sss.ly_length_mass),sss.tc_length_mass),sss.length_mass_avg))) AS split_landing_class_mass, 
 (sss.catch_length_frequency *(if(sss.length_mass_avg is null,if(sss.tc_length_mass is null,if(sss.ly_length_mass is null, sss.os_length_mass,sss.ly_length_mass),sss.tc_length_mass),sss.length_mass_avg))) AS catch_class_mass, 
 (sss.discard_length_frequency *(if(sss.length_mass_avg is null,if(sss.tc_length_mass is null,if(sss.ly_length_mass is null, sss.os_length_mass,sss.ly_length_mass),sss.tc_length_mass),sss.length_mass_avg))) AS discard_class_mass, 
 (sss.landing_length_frequency *(if(sss.length_mass_avg is null,if(sss.tc_length_mass is null,if(sss.ly_length_mass is null, sss.os_length_mass,sss.ly_length_mass),sss.tc_length_mass),sss.length_mass_avg))) AS landing_class_mass 

from 

(
 
select 

 slf_m.cruise,
 slf_m.station,
 slf_m.net,
 slf_m.this_year,
 slf_m.quarter,
 slf_m.sub_division,
 slf_m.species,
 slf_m.sex, 

 slf_m.length_class,
 ts.treat_landing_frequency,
 ts.treat_discard_frequency,

 case when slf_m.length_class < ts.split_length_class
      then slf_m.catch_length_frequency
      else 0
 end as split_discard_frequency,
      
 case when slf_m.length_class >= ts.split_length_class
      then slf_m.catch_length_frequency
      else 0
 end as split_landing_frequency,

 slf_m.catch_length_frequency,
 slf_m.landing_length_frequency,
 slf_m.discard_length_frequency,
 round(slf_m.length_mass_avg,4) as length_mass_avg,
 slf_m.tc_length_mass,
 slf_m.ly_length_mass,
 slf_m.os_length_mass
       
from 

(

select 

 slf.*,

#/* ((cmc.sy - (cmc.sn * cmc.sxy - cmc.sx * cmc.sy) / (cmc.sn * cmc.sqx - cmc.sx * cmc.sx) * cmc.sx) / cmc.sn) as ln_a_this_year,
# (lw.sy - lw.b  *lw.sx) / lw.sn
# (cmc.sn * cmc.sxy - cmc.sx * cmc.sy) / (cmc.sn * cmc.sqx - cmc.sx * cmc.sx) as b_this_year,
# (lw.sn * lw.sxy - lw.sx * lw.sy) / (lw.sn * lw.sqx - lw.sx * lw.sx)*/

 cma.length_mass_avg,

# exp

# (2.71828^(((cmc.sy - (cmc.sn * cmc.sxy - cmc.sx * cmc.sy) / (cmc.sn * cmc.sqx - cmc.sx * cmc.sx) * cmc.sx) / cmc.sn) + (cmc.sn * cmc.sxy - cmc.sx * cmc.sy) / (cmc.sn * cmc.sqx - cmc.sx * cmc.sx) * log(slf.length_class))) as tc_length_mass, 
# (2.71828^(lyc.ln_a + lyc.b * log(slf.length_class/10))) as ly_length_mass,

 round(EXP(((cmc.sy - (cmc.sn * cmc.sxy - cmc.sx * cmc.sy) / (cmc.sn * cmc.sqx - cmc.sx * cmc.sx) * cmc.sx) / cmc.sn) + (cmc.sn * cmc.sxy - cmc.sx * cmc.sy) / (cmc.sn * cmc.sqx - cmc.sx * cmc.sx) * log(slf.length_class)),4) as tc_length_mass, 

# round(EXP(lyc.ln_a + lyc.b * ln(slf.length_class/10)),4)as ly_length_mass,
# am 10.03.2011 wurde /10 rausgenommen, da ab diesen tag wurden die last_year_tabelle für koeff. in mm berechnet

 round(EXP(lyc.ln_a + lyc.b * ln(slf.length_class)),4)as ly_length_mass, 

# (osc.a *((slf.length_class / 10) ^ osc.b)) as os_length_mass
# (osc.a *((slf.length_class) ^ osc.b)) as os_length_mass

 round((osc.aa * power(slf.length_class/10,osc.b)),4) as os_length_mass 

from 

(
(
(
(
     
select 

 tlf.cruise,
 tlf.station,
 tlf.net,
 tlf.JAHR as this_year, 
 tlf.quarter,
 sf.SUBDIV as sub_division,
 tlf.species,
 tlf.sex,
 tlf.length_class,
 sum(tlf.catch_length_frequency) as catch_length_frequency,
 sum(tlf.landing_length_frequency) as landing_length_frequency,
 sum(tlf.discard_length_frequency) as discard_length_frequency
 
# into station_length_frequency 

from
(

######################################################################
#
# catch temporary length frequency tlf

select 

 fi.JAHR,
 fi.REISENR as cruise, 
 fi.STATION as station, 
 fi.NETZ as net,
 fi.QUARTAL as quarter, 
 fi.FISH as species, 
 'U' as sex, 
 10 * fi.LAENGE as length_class, 
 1 * fi.LANZAHL as catch_length_frequency, 
 0 as landing_length_frequency, 
 0 as discard_length_frequency  

from 

 `[commercial]_[sample_final]`.LengFi fi 

where 

 fi.JAHR = @year
 
 
union

#######################################################################
#
# landing temporary length frequency tlf

select 

 fi.JAHR,
 fi.REISENR as cruise, 
 fi.STATION as station, 
 fi.NETZ as net,
 fi.QUARTAL as quarter,
 fi.FISH as species, 
 'U' as sex, 
 10 * fi.LAENGE as length_class, 
 0 as catch_length_frequency, 
 1 * fi.LANZAHL as landing_length_frequency, 
 0 as discard_length_frequency  

from 

 `[commercial]_[sample_final]`.MLenFi fi 

where 
 
 fi.JAHR = @year

 
union

#######################################################################
#
# discard temporary length frequency tlf


 select 
 fi.JAHR,
 fi.REISENR as cruise, 
 fi.STATION as station, 
 fi.NETZ as net,
 fi.QUARTAL as quarter,
 fi.FISH as species, 
 'U' as sex, 
 10 * fi.LAENGE as length_class, 
 0 as catch_length_frequency, 
 0 as landing_length_frequency, 
 1 * fi.LANZAHL as discard_length_frequency  

from 

`[commercial]_[sample_final]`.DLenFi fi 

where 

 fi.JAHR = @year 

) tlf


######################################################################
#
# join StatFi

left join 

#select * from

 `[commercial]_[sample_final]`.StatFi sf

on 

 tlf.cruise = sf.REISENR 
and 
 tlf.station = sf.STATION
and 
 tlf.JAHR = sf.JAHR
 

######################################################################
#
# sum temporary length frequency into station length frequency slf


group by 

# (right(trim(sf.SUBDIV),1)  + right(trim(sf.REISENR),3)),

 tlf.cruise,
 tlf.station,

# val(sf.JAHR),

 tlf.net,
 tlf.JAHR,
 tlf.quarter,
 sf.SUBDIV,
 tlf.species,
 tlf.sex,
 tlf.length_class

) slf

left join

(

select 

######################################################################
#
# calc average length mass 
#

# (right(trim(st.SUBDIV),1) + right(trim(si.REISENR),3)) as cruise, 

 si.REISENR as cruise,
 si.JAHR,
 si.FISH as species, 
 'U' as sex,
 10 * si.LAENGE as length_class, 
 avg(si.TOTALGEW) as length_mass_avg, 
 count(*) as  mass_count
 
from 

 `[commercial]_[sample_final]`.SnglIOR si

# /*,  
# `[commercial]_[sample_final]`.StatFi st 
#where 
# si.REISENR = st.REISENR */

group by 

 si.REISENR,
 si.JAHR,
 si.FISH, 
 'U', 
 10 * si.LAENGE

) cma 

on 

 slf.species = cma.species 
and 
 slf.sex = cma.sex 
and 
 slf.length_class = cma.length_class 
and 
 slf.cruise = cma.cruise
and 
 slf.this_year = cma.JAHR

)

left join

(

select 

####################################################################
#
# this cruise length mass coefficient
#
 si.JAHR,
 si.FISH as species,
 'U' as sex,

# si.SEX as sex,
# (right(trim(st.SUBDIV),1) + right(trim(si.REISENR),3)) as cruise, 

 si.REISENR as cruise,
 sum(log(si.LAENGE * 10)) as sx, 
 sum(log(si.TOTALGEW)) as sy,
 sum(log(si.LAENGE * 10) * log(si.TOTALGEW)) as sxy,
 sum(log(si.LAENGE * 10) * log(si.LAENGE * 10)) as sqx, 
 sum(log(si.TOTALGEW) * log(si.TOTALGEW)) as sqy,
 count(*) as sn

from 
 `[commercial]_[sample_final]`.SnglIOR si 

# /*,
# `[commercial]_[sample_final]`.StatFi st 
#where 
# st.REISENR = si.REISENR  
#and 
# st.STATION = si.STATION */

group by 

 si.JAHR,
 si.FISH, 
 'U', 

# (right(trim(st.SUBDIV),1) + right(trim(si.REISENR),3))

 si.REISENR

) cmc  

on 

 slf.species = cmc.species 
and 
 slf.sex= cmc.sex 
and 
 slf.cruise = cmc.cruise
and 
 slf.this_year = cmc.JAHR
)

left join 

(
select 

####################################################################
#
# last year length mass coefficient lyc 


 ln_a,
 b,
 species_ish as species,
 year as last_year,
 quarter,
 right(division_sub,2) as sub_division

from 

 `[commercial]_[parameter]`.last_year_length_mass_coefficient

) lyc 

on 

 slf.species = lyc.species 
and 
 slf.sub_division = right(lyc.sub_division,4) 
and 
 slf.quarter = lyc.quarter
and 
 slf.this_year = (lyc.last_year +1)

)

left join 

(

select

#####################################################################
#
# other source length mass coefficient osc


 species_ish as species,
 a as aa,
 b

from 

 `[commercial]_[parameter]`.other_source_length_mass_coefficient 

) osc

on 

 slf.species = osc.species

) slf_m 

#####################################################################
#
# join treat sample tc 

left join

`[commercial]_[parameter]`.treat_sample ts 

on 

 slf_m.cruise = ts.cruise   
and 
 slf_m.station = ts.station  

#and 
# slf_m.net = ts.net

and 
 slf_m.this_year = ts.this_year 
and 
 slf_m.species = ts.species
 
) sss 

)sss_e 

;